package com.tabcorp.transaction.management.unit.mapper;

import com.tabcorp.transaction.management.dto.CustomerTransactionSummaryDTO;
import com.tabcorp.transaction.management.dto.CustomerTransactionSummaryRecord;
import com.tabcorp.transaction.management.dto.ProductTransactionSummaryDTO;
import com.tabcorp.transaction.management.dto.ProductTransactionSummaryRecord;
import com.tabcorp.transaction.management.mapper.TransactionSummaryMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mapstruct.factory.Mappers;
import org.mockito.junit.jupiter.MockitoExtension;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
class TransactionSummaryMapperTest {

    private TransactionSummaryMapper mapper;

    @BeforeEach
    void setUp() {
        // Get the mapper implementation that was generated by MapStruct
        mapper = Mappers.getMapper(TransactionSummaryMapper.class);
    }

    @Test
    @DisplayName("Should map CustomerTransactionSummaryRecord to CustomerTransactionSummaryDTO")
    void customerTransactionRecordToDto() {
        // Arrange
        CustomerTransactionSummaryRecord record = new CustomerTransactionSummaryRecord(
                10001L,
                "John",
                "Doe",
                125.50
        );

        // Act
        CustomerTransactionSummaryDTO dto = mapper.customerTransactionRecordToDto(record);

        // Assert
        assertNotNull(dto);
        assertEquals(10001, dto.getCustomerId());
        assertEquals("John", dto.getFirstName());
        assertEquals("Doe", dto.getLastName());
        assertEquals(new BigDecimal("125.50"), dto.getTotalCost());
    }

    @Test
    @DisplayName("Should map ProductTransactionSummaryRecord to ProductTransactionSummaryDTO")
    void productTransactionRecordToDto() {
        // Arrange
        ProductTransactionSummaryRecord record = new ProductTransactionSummaryRecord(
                "PRODUCT_001",
                "ACTIVE",
                250.75
        );

        // Act
        ProductTransactionSummaryDTO dto = mapper.productTransactionRecordToDto(record);

        // Assert
        assertNotNull(dto);
        assertEquals("PRODUCT_001", dto.getProductCode());
        assertEquals("ACTIVE", dto.getStatus());
        assertEquals(new BigDecimal("250.75"), dto.getTotalCost());
    }

    @Test
    @DisplayName("Should handle null values in CustomerTransactionSummaryRecord")
    void customerTransactionRecordToDto_withNullValues() {
        // Arrange
        CustomerTransactionSummaryRecord record = new CustomerTransactionSummaryRecord(
                null,
                null,
                null,
                null
        );

        // Act
        CustomerTransactionSummaryDTO dto = mapper.customerTransactionRecordToDto(record);

        // Assert
        assertNotNull(dto);
        assertNull(dto.getCustomerId());
        assertNull(dto.getFirstName());
        assertNull(dto.getLastName());
        assertNull(dto.getTotalCost());
    }

    @Test
    @DisplayName("Should handle null values in ProductTransactionSummaryRecord")
    void productTransactionRecordToDto_withNullValues() {
        // Arrange
        ProductTransactionSummaryRecord record = new ProductTransactionSummaryRecord(
                null,
                null,
                null
        );

        // Act
        ProductTransactionSummaryDTO dto = mapper.productTransactionRecordToDto(record);

        // Assert
        assertNotNull(dto);
        assertNull(dto.getProductCode());
        assertNull(dto.getStatus());
        assertNull(dto.getTotalCost());
    }

    @Test
    @DisplayName("Should handle zero values in total cost")
    void customerTransactionRecordToDto_withZeroTotalCost() {
        // Arrange
        CustomerTransactionSummaryRecord record = new CustomerTransactionSummaryRecord(
                10001L,
                "John",
                "Doe",
                0.0
        );

        // Act
        CustomerTransactionSummaryDTO dto = mapper.customerTransactionRecordToDto(record);

        // Assert
        assertNotNull(dto);
        assertEquals(BigDecimal.ZERO, dto.getTotalCost());
    }

    @Test
    @DisplayName("Should handle maximum values for customer ID and total cost")
    void customerTransactionRecordToDto_withMaxValues() {
        // Arrange - using large values to test boundary scenarios
        CustomerTransactionSummaryRecord record = new CustomerTransactionSummaryRecord(
                Long.MAX_VALUE,
                "Max",
                "Values",
                Double.MAX_VALUE
        );

        // Act
        CustomerTransactionSummaryDTO dto = mapper.customerTransactionRecordToDto(record);

        // Assert
        assertNotNull(dto);
        assertNotNull(dto.getCustomerId());
        assertEquals("Max", dto.getFirstName());
        assertEquals("Values", dto.getLastName());
        assertNotNull(dto.getTotalCost());
    }
}

